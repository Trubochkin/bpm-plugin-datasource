{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","$","_","GenericDatasourceQueryCtrl","$scope","$injector","alertSrv","scope","target","type","loading","loadingOk","loadingErr","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEQA,e,kBAAAA,S;;AAEDC,O;;AACAC,O;;;4CAGMC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,QAA/B,EAA0C;AAAA;;AAAA,8JAClCF,MADkC,EAC1BC,SAD0B;;AAGxC,gBAAKE,KAAL,GAAaH,MAAb;AACA;AACA,gBAAKI,MAAL,CAAYA,MAAZ,GAAqB,YAArB;AACA,gBAAKA,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,WAAvC;AACA,gBAAKH,QAAL,GAAgBA,QAAhB;AACA,gBAAKI,OAAL,GAAe,KAAf;AACA,gBAAKC,SAAL,GAAiB,KAAjB;AACA,gBAAKC,UAAL,GAAkB,KAAlB;AACA;AAXwC;AAYzC;;AAED;AACE;AACA;;;;;;;;;;;;;;;;;AAiBF;;AAEA;;;;AAIA;;;;;;QAzC8CZ,S;;;;AA8ChDG,iCAA2BU,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import './css/query-editor.css!';\n\nimport {QueryCtrl} from 'app/plugins/sdk';\n//import coreModule from 'grafana/app/core/core_module';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, alertSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    /* this.target.target = this.target.target || 'select metric'; */\n    this.target.target = 'fakeSearch';\n    this.target.type = this.target.type || 'timeserie';\n    this.alertSrv = alertSrv;\n    this.loading = false;\n    this.loadingOk = false;\n    this.loadingErr = false;\n    //this.getOptions();\n  }\n\n  //getOptions(query) {\n    //return [{text: '', value: ''}];\n    /* this.loading = true;\n    this.loadingOk = false;\n    this.loadingErr = false;\n    return this.datasource.metricFindQuery(query || '*')\n    .then((data) => {\n        this.loading = false;\n        this.loadingOk = true;\n        this.loadingErr = false;\n        return data;\n    }, err => {\n        this.loading = false;\n        this.loadingOk = false;\n        this.loadingErr = true;\n        this.alertSrv.set('Error ' + err.status, 'Metric data server is not available: ', 'error', 6000);\n        this.target.target = err.statusText || 'select metric';\n        return [{text: err.statusText, value: ''}];\n    }); */\n  //}\n\n  /* toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  } */\n\n  /* onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  } */\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}