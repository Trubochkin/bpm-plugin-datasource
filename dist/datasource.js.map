{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","contextSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","datasourceRequest","path","query","doRequest","data","method","target","map","replace","scopedVars","refId","hide","then","response","status","message","title","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv, contextSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n    this.contextSrv = contextSrv;\n    //this.user = {};\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  query(options, path = '') {\n    //console.log(\"datasource-metricsQuery: \", options);\n    var query = options;\n    // var query = this.buildQueryParameters(options);\n    // query.target = query.target.filter(t => !t.hide);\n    // if (query.target.length <= 0) {\n    //   return this.q.when({data: []});\n    // }\n    return this.doRequest({\n        url: this.url + path,\n        data: query,\n        method: 'POST'\n    });\n  }\n\n  buildQueryParameters(options) {\n    /* if(this.contextSrv.user.orgName) {\n      options.user = {\n        orgName: this.contextSrv.user.orgName,\n        orgRole: this.contextSrv.user.orgRole,\n        email: this.contextSrv.user.email,\n        login: this.contextSrv.user.login\n      };\n    } */\n    //remove placeholder targets\n    // options.target = _.filter(options.target, target => {\n    //   return target.target !== 'select metric';\n    // });\n\n    var target = _.map(options.target, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.target = target;\n\n    return options;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  /* metricFindQuery(query) {\n    //console.log('search', query);\n    var interpolated = {\n      target: this.templateSrv.replace(query, null, 'pipe')\n    };\n    if(this.contextSrv.user.orgName) {\n      interpolated.user = {\n        orgName: this.contextSrv.user.orgName,\n        orgRole: this.contextSrv.user.orgRole,\n        email: this.contextSrv.user.email,\n        login: this.contextSrv.user.login\n      };\n    }\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  } */\n\n  /* mapToTextValue(result) {\n    //this.loading = false;\n    var amtArr = result.data.length;\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        if (d.value === '' && amtArr == 1) return { text: 'empty', value: ''};\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  } */\n}"]}